//During the test the env variable is set to test
process.env.NODE_ENV = 'test';

let mongoose = require("mongoose");
let Article = require('../app/models/article');

//Require the dev-dependencies
let chai = require('chai');
let chaiHttp = require('chai-http');
let server = require('../server');
let should = chai.should();


chai.use(chaiHttp);

//Our parent block
describe('Articles', () => {
	beforeEach((done) => { //Before each test we empty the database
		Article.remove({}, (err) => { 
		   done();		   
		});		
	});
 /*
  * Test the /GET route
  */
  describe('/GET article', () => {
	  it('it should GET all the articles', (done) => {
			chai.request(server)
		    .get('/article')
		    .end((err, res) => {
			  	res.should.have.status(200);
			  	res.body.should.be.a('array');
			  	res.body.length.should.be.eql(0);
		      done();
		    });
	  });
  });
 /*
  * Test the /POST route
  */
  describe('/POST article', () => {
	  it('it should not POST a article without title field', (done) => {
	  	let article = {
	  		content: "J.R.R. Tolkien",
	  		articleImage: "article Image"
	  	}
			chai.request(server)
			.post('/article')
			.set('Authorization', 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImtlbGx5QGdtYWlsLmNvbSIsInVzZXJJZCI6IjVmN2FjMDRlM2M5MGFlYWI0YTYxYmNhZCIsImlhdCI6MTYwMTg4Mzc5OCwiZXhwIjoxNjAxODg3Mzk4fQ.NR1kkv9kMBjot4EFy_C-7C5NL7R2FnggfC8kEYj5uzs')
		    .send(article)
		    .end((err, res) => {
			  	res.should.have.status(200);
			  	res.body.should.be.a('object');
			  	res.body.should.have.property('errors');
			  	res.body.errors.should.have.property('title');
			  	res.body.errors.title.should.have.property('kind').eql('required');
		      done();
		    });
	  });
	  it('it should POST a article ', (done) => {
	  	let article = {
	  		title: "html",
	  		content: "html",
	  		articleImage: "article image"
	  	}
			chai.request(server)
			.post('/article')
			.set('Authorization', 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImtlbGx5QGdtYWlsLmNvbSIsInVzZXJJZCI6IjVmN2FjMDRlM2M5MGFlYWI0YTYxYmNhZCIsImlhdCI6MTYwMTg4Mzc5OCwiZXhwIjoxNjAxODg3Mzk4fQ.NR1kkv9kMBjot4EFy_C-7C5NL7R2FnggfC8kEYj5uzs')
		    .send(article)
		    .end((err, res) => {
			  	res.should.have.status(200);
			  	res.body.should.be.a('object');
			  	res.body.should.have.property('message').eql('Article successfully added!');
			  	res.body.article.should.have.property('title');
			  	res.body.article.should.have.property('content');
			  	res.body.article.should.have.property('articleImage');
		      done();
		    });
	  });
  });
 /*
  * Test the /GET/:id route
  */
  describe('/GET/:id article', () => {
	  it('it should GET a article by the given id', (done) => {
	  	let article = new Article({ title: "Js", content: "JS is awsome", articleImage: "image to be"});
	  	article.save((err, article) => {
	  		chai.request(server)
			.get('/article/' + article.id)
			.set('Authorization', 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImtlbGx5QGdtYWlsLmNvbSIsInVzZXJJZCI6IjVmN2FjMDRlM2M5MGFlYWI0YTYxYmNhZCIsImlhdCI6MTYwMTg4Mzc5OCwiZXhwIjoxNjAxODg3Mzk4fQ.NR1kkv9kMBjot4EFy_C-7C5NL7R2FnggfC8kEYj5uzs')
		    .send(article)
		    .end((err, res) => {
			  	res.should.have.status(200);
			  	res.body.should.be.a('object');
			  	res.body.should.have.property('title');
			  	res.body.should.have.property('content');
			  	res.body.should.have.property('articleImage');
			  	res.body.should.have.property('_id').eql(article.id);
		      done();
		    });
	  	});
			
	  });
  });
 /*
  * Test the /PUT/:id route
  */
  describe('/PUT/:id article', () => {
	  it('it should UPDATE a article given the id', (done) => {
	  	let article = new Article({title: "Java basics", content: "java", articleImage: "image hh"})
	  	article.save((err, article) => {
				chai.request(server)
				.put('/article/' + article.id)
				.set('Authorization', 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImtlbGx5QGdtYWlsLmNvbSIsInVzZXJJZCI6IjVmN2FjMDRlM2M5MGFlYWI0YTYxYmNhZCIsImlhdCI6MTYwMTg4Mzc5OCwiZXhwIjoxNjAxODg3Mzk4fQ.NR1kkv9kMBjot4EFy_C-7C5NL7R2FnggfC8kEYj5uzs')
			    .send({title: "Java basics", content: "java", articleImage: "image lorem" })
			    .end((err, res) => {
				  	res.should.have.status(200);
				  	res.body.should.be.a('object');
				  	res.body.should.have.property('message').eql('Article updated!');
				  	res.body.article.should.have.property('articleImage').eql("image lorem");
			      done();
			    });
		  });
	  });
  });
 /*
  * Test the /DELETE/:id route
  */
  describe('/DELETE/:id article', () => {
	  it('it should DELETE a article given the id', (done) => {
	  	let article = new Article({title: "node", content: "node.js", articleImage: "node image"})
	  	article.save((err, article) => {
				chai.request(server)
				.delete('/article/' + article.id)
				.set('Authorization', 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImtlbGx5QGdtYWlsLmNvbSIsInVzZXJJZCI6IjVmN2FjMDRlM2M5MGFlYWI0YTYxYmNhZCIsImlhdCI6MTYwMTg4Mzc5OCwiZXhwIjoxNjAxODg3Mzk4fQ.NR1kkv9kMBjot4EFy_C-7C5NL7R2FnggfC8kEYj5uzs')
			    .end((err, res) => {
				  	res.should.have.status(200);
				  	res.body.should.be.a('object');
				  	res.body.should.have.property('message').eql('Article successfully deleted!');
				  	res.body.result.should.have.property('ok').eql(1);
				  	res.body.result.should.have.property('n').eql(1);
			      done();
			    });
		  });
	  });
  });
});
  